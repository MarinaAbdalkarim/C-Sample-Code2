//               Course:  CS2400-60 Computer Science 2
//                 Name:  Abdalkarim, Marina
//           Assignment:  Programming Assignment P5.1
//               Remark:  The program tests all functions.
#include <iostream>
#include <string>
using namespace std;
struct rational
{
	int num;	// numerator
	int den;	// denominator; b â‰  0
};
void set(int aa, int bb, rational &r);
// Postcondition: rational number r is set to aa / bb
void display(rational &r);
// Postcondition: displays a rational number  r in the following format: a / b, e.g., 1 / 2,  -5 /9 (not 5 / -9), 1 / 4 (not 2 / 8, etc.)
rational add(const rational &r1, const rational &r2);
// Postcondition: (r1 + r2) -- a rational number -- is returned (notice the return type is rational!)
rational subtract(const rational &r1, const rational &r2);
// Postcondition: (r1 - r2) -- a rational number -- is returned 
rational multiply(const rational &r1, const rational &r2);
// Postcondition: (r1 * r2) -- a rational number -- is returned 
rational divide(const rational &r1, const rational &r2);
// Postcondition: (r1 / r2) -- a rational number -- is returned
int compare(const rational &r1, const rational&r2);
// Postcondition: returns 1 if r1 is greater than r2; 0 if r1 is equal to r2; -1 is r1 is less than r2 
int GCD(const rational &r);
// You must use the Euclidean algorithm. https://en.wikipedia.org/wiki/Euclidean_algorithm
// Postcondition: returns the "greatest common divisor" between r.a and r.b
int main()
{
	rational x, y, sum, diff, mul, div;
	int com;
	set(-1, 2, x);
	set(1, 3, y);
	sum = add(x, y);
	diff = subtract(x, y);
	mul = multiply(x, y);
	div = divide(x, y);
	com = compare(x, y);
	cout << "r1 = ";
	display(x);
	cout << "r2 = ";
	display(y);
	cout << "r3 = r1 + r2 = ";
	display(sum);
	cout << "r4 = r1 - r2 = ";
	display(diff);
	cout << "r5 = r1 * r2 = ";
	display(mul);
	cout << "r6 = r1 / r2 = ";
	display(div);
	if (com == 1)
		cout << "r1 is greater than r2" << endl;
	else if (com == -1)
		cout << "r1 is less than r2" << endl;
	if (com == 0)
		cout << "r1 is equal to r2" << endl;
	return 0;
}
rational add(const rational &r1, const rational &r2)
{
	rational sum;
	sum.num = (r1.num * r2.den) + (r2.num * r1.den);
	sum.den = r1.den * r2.den;
	return sum;
}
void set(int a, int b, rational &r)
{
	r.num = a;
	r.den = b;
}
void display(rational &r)
{
	int gcd = GCD(r);
	int a, b;
	a = r.num / gcd;
	b = r.den / gcd;
	if (b < 0)
	{
		a = a * (-1);
		b = b * (-1);
	}
	cout << a << " / " << b << endl;
}
rational subtract(const rational &r1, const rational &r2)
{
	rational diff;
	diff.num = (r1.num * r2.den) - (r2.num * r1.den);
	diff.den = r1.den * r2.den;
	return diff;
}
rational multiply(const rational &r1, const rational &r2)
{
	rational mul;
	mul.num = r1.num * r2.num;
	mul.den = r1.den * r2.den;
	return mul;
}
rational divide(const rational &r1, const rational &r2)
{
	rational div, temp;
	temp.num = r2.den;
	temp.den = r2.num;
	div.num = r1.num * temp.num;
	div.den = r1.den * temp.den;
	return div;
}
int compare(const rational &r1, const rational&r2)
{
	rational diff;
	diff = subtract(r1, r2);
	if (diff.num == 0)
		return 0;
	else if (diff.num < 0)
		return -1;
	else if (diff.num > 0)
		return 1;
	return 0;
}
int GCD(const rational &r)
{
	int a = 0, b = 0;
	int remainder = r.num % r.den;
	while (remainder != 0)
	{
		a = r.den;
		b = remainder;
		remainder = a % b;
	}
	return b;
}
